package com.house365.housebutler.view;

import android.annotation.SuppressLint;
import android.content.Context;
import android.content.res.TypedArray;
import android.graphics.drawable.Drawable;
import android.util.AttributeSet;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.DecelerateInterpolator;
import android.view.animation.Transformation;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;

import com.house365.xinfangbao.R;

/**
 * 
 * @author renmingming
 *
 */
public class PushView extends RelativeLayout {
    private static final boolean DEBUG = false;
    private static final String TAG = "PushView";

    private final int DEFUAL_SURPLUS = 80;
    private Button pushBtn;
    // private TextView nodataText;
    private int surplus = DEFUAL_SURPLUS;
    private boolean translateType = false;// true 缩起 ， false展开
    private View pushBtn_layout;
    private boolean isInit = true;
    private boolean islayout = true;
    private int moveh = 0;
    private int startB = 0;
    private int startT = 0;
    private int MaxH = 0;
    private View contentView;
    private boolean isMoving = false;
    private String packUpContent;// 收起所需要显示的内容
    private MyAnimation ta;
    private boolean pushButtonisShow;
    int h = 0;
    private int hideHeigh = 0;
    int Moving_h = 0;
    private View divider;
    @SuppressLint("Recycle")
    public PushView(Context context, AttributeSet attrs) {
        super(context, attrs);
        pushBtn_layout = View.inflate(context, R.layout.view_push_button, null);
        pushBtn = (Button) pushBtn_layout.findViewById(R.id.expand_btn);
        // nodataText = (TextView) pushBtn_layout.findViewById(R.id.nodata_text);
        TypedArray t = getContext().obtainStyledAttributes(attrs, R.styleable.pushview);
        translateType = t.getBoolean(R.styleable.pushview_translateType, false);
        pushButtonisShow = t.getBoolean(R.styleable.pushview_pushButtonisShow, true);
        divider = pushBtn_layout.findViewById(R.id.push_divider);
        final String nodata = t.getString(R.styleable.pushview_nodata);
        hideHeigh = t.getDimensionPixelSize(R.styleable.pushview_hideheigh, 0);
        setButtonBg_color(t.getColor(R.styleable.pushview_background_color, 0x00000000));

        setPackUpContent(nodata);
        if (translateType) {
            pushBtn.setText(packUpContent);
        } else {
            pushBtn.setText("");
        }
        addView(pushBtn_layout);
        ta = new MyAnimation();
        ta.setDuration(600);
        ta.setInterpolator(new DecelerateInterpolator());

        pushBtn.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                if (ta.getDuration() > 0) {
                    isInit = false;
                    translateType = !translateType;
                    startAnimation(ta);
                }
            }
        });
        ta.setAnimationListener(new AnimationListener() {
            @Override
            public void onAnimationStart(Animation animation) {
                 if (DEBUG)
                Log.v(TAG, "onAnimationStart()");
                isMoving = true;
            }

            @Override
            public void onAnimationRepeat(Animation animation) {
                 if (DEBUG)
                Log.v(TAG, "onAnimationRepeat()");
                isMoving = true;
            }

            @Override
            public void onAnimationEnd(Animation animation) {
                 if (DEBUG)
                Log.v(TAG, "onAnimationEnd()");
                isMoving = false;
                if (translateType) {
                    pushBtn.setText(packUpContent);
                    pushBtn.setCompoundDrawablesWithIntrinsicBounds(null, null, null, getResources()
                            .getDrawable(R.drawable.btn_down));
                } else {
                    pushBtn.setText("");
                    pushBtn.setCompoundDrawablesWithIntrinsicBounds(null, null, null, getResources()
                            .getDrawable(R.drawable.btn_up));
                }
            }
        });
        showOrHide();
    }

    public void setDrivider(Drawable drawable){
        divider.setBackgroundDrawable(drawable);
    }
    
    public void setDrivider_color(int color){
        divider.setBackgroundColor(color);
    }
    
    public void setDrivider_High(int high){
        ViewGroup.LayoutParams lp= divider.getLayoutParams();
        lp.height = high;
        divider.setLayoutParams(lp);
    }
    
    public void setButtonBg_color(int color) {
        pushBtn.setBackgroundColor(color);
    }

    public void setButtonBg_drawable(Drawable drawable) {
        pushBtn.setBackgroundDrawable(drawable);
    }

    public void setHideHeigh(int hideHeigh) {
        this.hideHeigh = hideHeigh;
    }

    public void showOrHide() {
        if (pushButtonisShow) {
            pushBtn.setVisibility(VISIBLE);
        } else {
            pushBtn.setVisibility(GONE);
            translateType = false;
        }
    }

    public boolean isPushButtonisShow() {
        return pushButtonisShow;
    }

    public void setPushButtonisShow(boolean pushButtonisShow) {
        this.pushButtonisShow = pushButtonisShow;
        showOrHide();
    }

    public String getPackUpContent() {
        return packUpContent;
    }

    public void setPackUpContent(String packUpContent) {
        this.packUpContent = packUpContent;
        if (translateType) {
            pushBtn.setText(packUpContent);
        }
    }

    @Override
    protected void onLayout(boolean changed, int l, int t, int r, int b) {
        if (!isMoving) {
            int w = r - l;
            int mTotalHeight = 0;
            int childCount = getChildCount();
            for (int i = 0; i < childCount; i++) {
                View childView = getChildAt(i);
                if (childView != null) {
                    int measureHeight = childView.getMeasuredHeight();
                    if (DEBUG) Log.v(TAG, "==========onLayout() childView（" + i + ")： " + measureHeight);
                    mTotalHeight += measureHeight;
                }
            }
            View title_view = ((ViewGroup) contentView).getChildAt(0);
            int cc_h = 0;
            if (title_view != null) {
                ViewGroup.LayoutParams h_v_lp = title_view.getLayoutParams();
                int title_topMargin = 0;
                int title_bottomMargin = 0;
                if (h_v_lp instanceof RelativeLayout.LayoutParams) {
                    RelativeLayout.LayoutParams lp = (LayoutParams) h_v_lp;
                    title_topMargin = lp.topMargin;
                    title_bottomMargin = lp.bottomMargin;
                }
                if (h_v_lp instanceof LinearLayout.LayoutParams) {
                    LinearLayout.LayoutParams lp = (LinearLayout.LayoutParams) h_v_lp;
                    title_topMargin = lp.topMargin;
                    title_bottomMargin = lp.bottomMargin;
                }
                if (h_v_lp instanceof FrameLayout.LayoutParams) {
                    FrameLayout.LayoutParams lp = (FrameLayout.LayoutParams) h_v_lp;
                    title_topMargin = lp.topMargin;
                    title_bottomMargin = lp.bottomMargin;
                }
                cc_h = title_view.getMeasuredHeight() + title_topMargin + title_bottomMargin;
            }
            if (DEBUG) Log.v(TAG, "==========hideHeigh==========" + hideHeigh);
            // if (!translateType) {
            MaxH = mTotalHeight;
            // } else {
            // MaxH = MaxH > (mTotalHeight + 0) ? MaxH : (mTotalHeight + 0);
            // }
            if (DEBUG)
                Log.v(TAG, "==========mTotalHeight==========" + mTotalHeight + "=====MaxH====" + MaxH);
            surplus = cc_h + hideHeigh + pushBtn_layout.getMeasuredHeight() + contentView.getPaddingTop()
                    + contentView.getPaddingBottom();
            startT = t;

            startB = MaxH + startT;
            moveh = startB - startT - surplus;
            ta.setDuration((long) (Math.pow(moveh, 1 / 2.0) * 10));
            if (translateType) {
                h = surplus > MaxH ? MaxH : surplus;
            } else {
                h = MaxH;
            }
            contentView.layout(0, 0, r - l, h - pushBtn_layout.getMeasuredHeight());
            pushBtn_layout.layout(0, h - pushBtn_layout.getMeasuredHeight(), r - l, h);
            ViewGroup.LayoutParams rl = (ViewGroup.LayoutParams) getLayoutParams();
            rl.width = w;
            rl.height = h;
            setLayoutParams(rl);
            if (DEBUG) Log.v(TAG, "==========onLayout() moveh====" + moveh);
            if (DEBUG)
                Log.v(TAG,
                        "==========onLayout() " + "===mTotalHeight==" + mTotalHeight + "===h===" + h
                                + "=======pushBtn_layout.getMeasuredHeight() ======"
                                + pushBtn_layout.getMeasuredHeight());
        }
        if (DEBUG)
            Log.v(TAG, "==========onLayout()  surplus=" + surplus + "   l==" + l + "  t==" + t + "   r==" + r
                    + "   b==" + b + "===translateType==" + translateType + "=pushBtn_layout="
                    + pushBtn_layout.getHeight() + (pushBtn_layout.isShown()));

    }

    class MyAnimation extends Animation {
        @Override
        protected void applyTransformation(float interpolatedTime, Transformation t) {

            if (!isInit) {
                int w = getRight() - getLeft();
                if (DEBUG) Log.v(TAG, "==========applyTransformation() moveh====" + moveh);
                if (!translateType) {
                    Moving_h = h + (int) (moveh * interpolatedTime);
                    View v = ((ViewGroup) contentView).getChildAt(0);
                    int content_h = (v != null ? v.getHeight() : 0) + hideHeigh
                            + (int) (moveh * interpolatedTime) + contentView.getPaddingTop()
                            + contentView.getPaddingBottom();
                    // Log.v(TAG, "==========applyTransformation() " + "===content_h==" + content_h
                    // + "===h===" + h);
                    contentView.layout(0, 0, getRight() - getLeft(), content_h);
                    pushBtn_layout.layout(0, content_h, getRight() - getLeft(), Moving_h);

                } else {
                    Moving_h = h - (int) (moveh * interpolatedTime);
                    contentView.layout(0, 0, getRight() - getLeft(),
                            startB - startT - pushBtn_layout.getHeight() - (int) (moveh * interpolatedTime));
                    pushBtn_layout.layout(0, startB - startT - pushBtn_layout.getHeight()
                            - (int) (moveh * interpolatedTime), getRight() - getLeft(), Moving_h);
                    if (DEBUG)
                        Log.v(TAG,
                                "==========applyTransformation surplus="
                                        + surplus
                                        + "   l=="
                                        + getLeft()
                                        + "  t=="
                                        + (startB - startT - pushBtn_layout.getHeight() - (int) (moveh * interpolatedTime))
                                        + "   r==" + getRight() + "   b=="
                                        + (startB - startT - (int) (moveh * interpolatedTime))
                                        + "===pushBtn_layout" + pushBtn_layout.getHeight());
                }
                ViewGroup.LayoutParams rl = (ViewGroup.LayoutParams) getLayoutParams();
                rl.width = w;
                rl.height = Moving_h;
                setLayoutParams(rl);
            }
        }

        @Override
        public void initialize(int width, int height, int parentWidth, int parentHeight) {
            super.initialize(width, height, parentWidth, parentHeight);
        }

    }

    @Override
    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {
        if (islayout) {
            islayout = false;
            contentView = getChildAt(1);
            contentView.setId(1);
            RelativeLayout.LayoutParams lp = new RelativeLayout.LayoutParams(
                    RelativeLayout.LayoutParams.MATCH_PARENT, RelativeLayout.LayoutParams.WRAP_CONTENT);
            lp.addRule(RelativeLayout.BELOW, 1);
            pushBtn_layout.setLayoutParams(lp);

        }
        int expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE >> 2, MeasureSpec.AT_MOST);
        // super.onMeasure(widthMeasureSpec, expandSpec);
        measureChildren(widthMeasureSpec, expandSpec);
        int sumH = 0;
        for (int i = 0; i < getChildCount(); ++i) {
            View child = getChildAt(i);
            sumH += child.getMeasuredHeight();
        }
        int measureWidth = measureWidth(widthMeasureSpec);
        if (translateType) {
            View v = ((ViewGroup) contentView).getChildAt(0);
            int sum_h = 0;
            if (v != null) {
                sum_h = v.getMeasuredHeight() + hideHeigh + pushBtn_layout.getMeasuredHeight()
                        + contentView.getPaddingBottom() + contentView.getPaddingTop();
            } else {
                sum_h = hideHeigh + pushBtn_layout.getMeasuredHeight() + contentView.getPaddingBottom()
                        + contentView.getPaddingTop();
            }
            if (sum_h < sumH) {
                sumH = sum_h;
            }

        }
        if (!isMoving) {
            setMeasuredDimension(measureWidth, sumH);
        } else {
            setMeasuredDimension(measureWidth, Moving_h);
        }

        if (DEBUG)
            Log.v(TAG, "=====measureHeight========" + "==isMoving==" + isMoving + "==sumH==" + sumH
                    + "===Moving_h====" + Moving_h);
    }

    private int measureWidth(int pWidthMeasureSpec) {

        int widthMode = MeasureSpec.getMode(pWidthMeasureSpec);
        int widthSize = MeasureSpec.getSize(pWidthMeasureSpec);
        int result = widthMode;
        switch (widthMode) {
        case MeasureSpec.EXACTLY:
            result = widthSize;
            break;
        }
        return result;
    }

    private int measureHeight(int pHeightMeasureSpec) {
        if (translateType) {
            int heightMode = MeasureSpec.getMode(pHeightMeasureSpec);
            int heightSize = MeasureSpec.getSize(pHeightMeasureSpec);
            int result = heightMode;
            switch (heightMode) {
            case MeasureSpec.EXACTLY:
                result = heightSize;
                break;
            }
            return result;
        } else {
            int hight = 0;
            int size = getChildCount();
            for (int i = 0; i < size; ++i) {
                View child = getChildAt(i);
                hight += child.getMeasuredHeight();
            }
            return hight;

        }

    }
}
